package io.quarkus.code.services

import org.eclipse.jgit.api.Git
import org.eclipse.jgit.api.errors.GitAPIException
import org.eclipse.jgit.transport.UsernamePasswordCredentialsProvider
import org.kohsuke.github.GHCreateRepositoryBuilder
import org.kohsuke.github.GHRepository
import org.kohsuke.github.GitHubBuilder
import java.io.IOException
import java.io.UncheckedIOException
import java.nio.file.Path
import java.util.Objects.requireNonNull
import javax.enterprise.context.ApplicationScoped


@ApplicationScoped
open class GitHubService {

    @Throws(UncheckedIOException::class)
    open fun createRepository(token: String, repositoryName: String): GHRepository {
        val newlyCreatedRepo: GHRepository
        try {
            val gitHub = GitHubBuilder().withOAuthToken(token).build()
            val repositoryBuilder: GHCreateRepositoryBuilder = gitHub.createRepository(repositoryName)
            newlyCreatedRepo = repositoryBuilder
                    .description("Generated by code.quarkus.io")
                    .create()
        } catch (e: IOException) {
            throw UncheckedIOException(String.format("Could not create GitHub repository named '%s'", repositoryName), e)
        }

        return newlyCreatedRepo
    }

    open fun push(token: String, repository: GHRepository, path: Path) {
        requireNonNull(repository, "repository must not be null.")
        requireNonNull(path, "path must not be null.")

        try {
            Git.init().setDirectory(path.toFile()).call().use { repo ->
                repo.add().addFilepattern(".").call()
                repo.commit().setMessage("Initial commit")
                        .setAuthor("quarkusio", "no-reply@quarkus.io")
                        .setCommitter("quarkusio", "no-reply@quarkus.io")
                        .setSign(false)
                        .call()

                val pushCommand = repo.push()
                pushCommand.remote = repository.httpTransportUrl
                pushCommand.setCredentialsProvider(UsernamePasswordCredentialsProvider(repository.ownerName, token))
                pushCommand.call()
            }
        } catch (e: GitAPIException) {
            throw IllegalStateException("An error occurred while pushing to the git repo", e)
        }

    }
}